// All the DOM selectors stored as short variables
const chat = document.getElementById("chat")
const nameForm = document.getElementById("name-form")
const nameInput = document.getElementById("name-input")
const inputWrapper = document.getElementById("input-wrapper")

// Global variables, if you need any, declared here

// Vi deklarerar userName som en global variabel f√∂r att sedan
// ge den ett nytt v√§rde i fr√•ga 1, samt f√∂r att kunna anv√§nda
// den i sammanfattningen fr√•n boten
let userName = ""

// H√§r l√§gger vi till id="select" f√∂r att kunna h√§mta dem senare
// och lyssna p√• dem.
const pizzaMenu = `
  <select id="select">
    <option value="" selected disabled>V√§lj en pizza...</option>
    <option value="Margerita">Margerita</option>
    <option value="Vesuvio">Vesuvio</option>
    <option value="Pepperoni">Pepperoni</option>
  </select>
`

const pastaMenu = `
  <select id="select">
    <option value="" selected disabled>V√§lj en pasta...</option>
    <option value="Carbonara">Pasta Carbonara</option>
    <option value="Pomodoro">Pasta Pomodoro</option>
    <option value="Frutti Di Mare">Frutti Di Mare</option>
  </select>
`

const saladMenu = `
  <select id="select">
    <option value="" selected disabled>V√§lj en sallad...</option>
    <option value="Grekisk sallad">Grekisk sallad</option>
    <option value="Pomodoro">Pasta Pomodoro</option>
    <option value="Frutti Di Mare">Frutti Di Mare</option>
  </select>
`

// Functions declared here

// This function will add a chat bubble in the correct place based on who the sender is
const showMessage = (message, sender) => {
  if (sender === "user") {
    chat.innerHTML += `
      <section class="user-msg">
        <div class="bubble user-bubble">
          <p>${message}</p>
        </div>
        <img src="assets/user.png" alt="User" />  
      </section>
    `
  } else if (sender === "bot") {
    chat.innerHTML += `
      <section class="bot-msg">
        <img src="assets/bot.png" alt="Bot" />
        <div class="bubble bot-bubble">
          <p>${message}</p>
        </div>
      </section>
    `
  }

  // This little thing makes the chat scroll to the last message when there are too many to be shown in the chat box
  chat.scrollTop = chat.scrollHeight
}

//Sammanfattning

// Vi deklarerar v√•r sista funktion med tv√• parametrar
const askForConfirmation = (amount, selectedDish) => {
  
  // Vi t√∂mmer input-f√§ltet
  inputWrapper.innerHTML = ""

  // Vi skickar ett meddelande fr√•n botten med hj√§lp av parametrarna
  showMessage(`Okej, vi har tagit emot din order p√• ${amount} ${selectedDish}! √Ñr du s√§ker p√• att du vill best√§lla detta?`, "bot")
  
  // Vi byter ut HTML:en till tv√• knappar och ger dem varsitt id
  inputWrapper.innerHTML = `
    <button id="restart">Nej ‚úã</button>
    <button id="confirm">Ja üòã</button>
  `
  
  // Vi h√§mtar knapparna f√∂r att sedan kunna lyssna p√• knapptryck
  // Nej-knappen har id="restart" och d√• kallar vi p√• en inbyggd
  // JavaScript-funktion f√∂r att ladda om sidan.
  document.getElementById("restart").addEventListener("click", () => location.reload())
  
  // Ja-knappen har id="confirm"
  document.getElementById("confirm").addEventListener("click", () => {
    
    // Vi t√∂mmer d√• input-f√§ltet
    inputWrapper.innerHTML = ""

    // Vi skickar ett meddelande fr√•n anv√§ndaren
    showMessage("Ja üòã", "user")

    // Vi skickar v√•rt sista meddelande fr√•n boten och anv√§nder dels
    // parametrarna amount och selectedDish, men ocks√• den globala
    // variabeln userName
    setTimeout(() => showMessage(`Tack ${userName} f√∂r din best√§llning av ${amount} ${selectedDish}!`, "bot"), 1000)
  })
}

//Fr√•ga 4

// Vi deklarerar askForAmount-funktionen med selectedDish som parameter
const askForAmount = selectedDish => {
  
  // Vi skickar ett meddelande fr√•n boten och h√§mtar d√• upp parametern
  showMessage(`Hur m√•nga ${selectedDish} vill du ha?`, "bot")

  // Vi byter ut input-f√§ltets HTML f√∂r att visa en numerisk input och
  // en knapp. Vi ger dem varsitt id f√∂r att kunna anv√§nda dem nedan.
  inputWrapper.innerHTML = `
    <input type="number" id="amount"/>
    <button id="amount-btn" class="send-btn">
      Skicka
    </button>
  `
  
  // Vi sparar den numeriska inputten i en variabel
  const amountInput = document.getElementById("amount")

  // Vi h√§mtar knappen f√∂r att kunna lyssna p√• knapptrycket.
  document.getElementById("amount-btn").addEventListener("click", () => {
    
    // Vid knapptryck skickar vi f√∂rst ett meddelande fr√•n anv√§ndaren
    // med v√§rdet av den numeriska inputten
    showMessage(amountInput.value, "user")

    // D√§refter kallar vi p√• n√§sta funktion med en f√∂rdr√∂jning. Vi skickar
    // med b√•de v√§rdet av den numeriska inputten och den valda matr√§tten
    // som argument.
    setTimeout(() => askForConfirmation(amountInput.value, selectedDish), 1000)
  })
}

//Fr√•ga 3
const askForDish = foodChoice => {
  showMessage(`Vilken typ av ${foodChoice} vill du ha?`, "bot")

  if (foodChoice === "pizza") {
    inputWrapper.innerHTML = pizzaMenu
  } else if (foodChoice === "pasta") {
    inputWrapper.innerHTML = pastaMenu
  } else {
    inputWrapper.innerHTML = saladMenu
  }

  // Vi h√§mtar rullgardins-menyn fr√•n HTML:en med hj√§lp av dess id
  const selectedDish = document.getElementById("select")

  // Vi lyssnar p√• en f√∂r√§ndring i rullgardinmenyn
  selectedDish.addEventListener("change", () => {
    
    // Vi skickar v√§rdet av rullgardinsvalet som ett meddelande fr√•n
    // anv√§ndaren.
    showMessage(selectedDish.value, "user")

    // Vi kallar p√• askForAmount-funktionen med f√∂rdr√∂jning. Vi skickar
    // med v√§rdet av rullgardinsmenyn som ett argument.
    setTimeout(() => askForAmount(selectedDish.value), 1000)
  })
}

// Fr√•ga 2
const askForFood = userName => {
  showMessage(`Trevligt att tr√§ffas, ${userName}! Vad vill du √§ta idag?`, "bot")
  
  inputWrapper.innerHTML=`
    <button id="pizzaButton">Pizza</button>
    <button id="pastaButton">Pasta</button>
    <button id="saladButton">Sallad</button>
  `

  document
    .getElementById("pizzaButton")
    .addEventListener("click", () => {
      // Vi definierar vad som ska h√§nda n√§r anv√§ndaren klickar p√• en
      // av matknapparna inuti m√•svingar f√∂r att kunna skriva flera
      // rader. Vi skickar f√∂rst ett meddelande fr√•n anv√§ndaren och
      // sedan f√∂rdr√∂jer vi hela anropet av askForDish-funktionen med
      // hj√§lp av setTimeout-funktionen. P√• samma s√§tt f√∂r alla tre knappar.
      showMessage(`Jag vill ha pizza`, "user")
      setTimeout(() => askForDish("pizza"), 1000)
    })
  document
    .getElementById("pastaButton")
    .addEventListener("click", () => {
      showMessage(`Jag vill ha pasta`, "user")
      setTimeout(() => askForDish("pasta"), 1000)
    })
  document
    .getElementById("saladButton")
    .addEventListener("click", () => {
      showMessage(`Jag vill ha sallad`, "user")
      setTimeout(() => askForDish("sallad"), 1000)
    })
}


// Fr√•ga 1
const handleNameInput = event => {
  event.preventDefault()

  // H√§r tog vi bort const-deklarationen eftersom vi ist√§llet
  // deklarerar userName som en global variabel h√∂gst upp. Vi
  // deklarerade den med let p√• rad 12 - f√∂r att kunna ge den
  // ett nytt v√§rde p√• raden nedan
  userName = nameInput.value
  nameInput.value = ""
  showMessage(userName, "user")

  setTimeout(() => askForFood(userName), 1000)
}

// Starts here
const greeting = () => {
  showMessage("Hej, vad heter du?", "bot")
  // Just to check it out, change 'bot' to 'user' here üëÜ
}

// Set up your eventlisteners here
nameForm.addEventListener("submit", handleNameInput)

// When website loaded, chatbot asks first question.
// normally we would invoke a function like this:
// greeting()
// But if we want to add a little delay to it, we can wrap it in a setTimeout:
// setTimeout(functionName, timeToWaitInMilliSeconds)
// This means the greeting function will be called one second after the website is loaded.
setTimeout(greeting, 1000)
